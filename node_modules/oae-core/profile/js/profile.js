/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function($, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        var $publicationsList = $('#profile-publications-container > .profile-publications', $rootel);

        // The user profile
        var userProfile = null;

        // Featured content for the user
        var featuredContent = null;

        // List of publications the user's authored
        var publications = [];

        //////////////////
        // PUBLICATIONS //
        //////////////////

        /**
         * Render a user's publications
         *
         * @param  {Array}  publications  The list of publications to render
         * @return                        A string containing the rendered publications.
         */
        var renderPublications = function(publications) {
            return oae.api.util.template().render($('#profile-publications-template', $rootel), {
                'userProfile': userProfile,
                'publications': publications
            });
        };

        /** Use the infinite scroll plugin to auto-load new publications as required. */
        var setupPublicationsInfiniteScroll = function() {
            var url = oae.api.publications.getUserPublicationsURL(widgetData.principalId);
            var renderer = handleNewPublications;

            $publicationsList.infiniteScroll(url, null, renderer);
        };

        /**
         * Called by infinitescroll every time some new publications
         * become available.
         *
         * We have to act somewhat differently to a normal render function
         * because the presentation of publications is somewhat different
         * to a normal list of elements. We can't just append new items
         * to the end as they get grouped by year for each year.
         *
         * As a result we maintain a full listing of publications that've
         * been fetched and re group & render the entire list every time
         * we get more publications though. To make this work we'll also
         * need to empty the publication list each time as infinitescroll
         * wants to append the return value of this function to the
         * container.
         *
         * @return     An HTML string containing the rendered publications
         */
        var handleNewPublications = function (newPublications) {
            publications = publications.concat(newPublications);

            groupedPublications = groupPublicationsByYear(publications);

            // Clear the publication container as infinitescroll assumes
            // it's only appending new publications, but we're giving it
            // all of them.
            $publicationsList.empty();

            return renderPublications(groupedPublications);
        };

        /**
         * Restructure a list of publications for templating.
         *
         * Publications are grouped under their year.
         *
         * @param  {Array}   publications   An array of publication objects
         * @return An array of pairs of [year, [publications]].
         */
        var groupPublicationsByYear = function(publications) {
                return _(publications).chain()
                    .map(postProcessPublication)
                    .groupBy(getPublicationYear)
                    .pairs()
                    .sortBy(_.first)
                    .reverse()
                    .value();
        };

        /** Perform any publication data modifications required for templating. */
        var postProcessPublication = function(publication) {
            publication.publicationType = titleCase(publication.publicationType);
            return publication;
        };

        /** Get the year a publication is dated at. */
        var getPublicationYear = function(publication) {
            return new Date(publication.date).getFullYear();
        };

        /** Uppercase the first letter of each word in a string. */
        var titleCase = function(string) {
            return string.replace(/\b(\w)/g, function(x) { return x.toUpperCase(); });
        };

        /////////////
        // PROFILE //
        /////////////

        /**
         * Render the profile tab
         */
        var renderProfile = function() {
            oae.api.util.template().render($('#profile-profile-template', $rootel), {
                'userProfile': userProfile,
                'featuredContent': featuredContent
            }, $('#profile-profile-container', $rootel));
        };

        /**
         * Get 3 items of featured content for the user (placeholder for publications later)
         *
         * @param  {Function}   callback   Standard callback function
         */
        var getUserFeaturedContent = function(callback) {
            $.ajax({
                'url': '/api/content/library/' + widgetData.principalId,
                'data': {
                    'limit': 3
                },
                'success': function(data) {
                    featuredContent = data.results;
                    callback();
                }
            });
        };

        /**
         * Get the user profile
         *
         * @param  {Function}   callback   Standard callback function
         */
        var getUserContext = function(callback) {
            oae.api.user.getUser(widgetData.principalId, function(err, data) {
                if (!err) {
                    userProfile = data;
                    callback();
                }
            });
        };


        ////////////////////
        // INITIALIZATION //
        ////////////////////

        /**
         * Initialize the profile widget
         */
        var initProfile = function() {
            getUserContext(function() {
                getUserFeaturedContent(function() {
                    renderProfile();

                    setupPublicationsInfiniteScroll();
                });
            });

            $rootel.on('click', '#profile-follow', function() {
                $(document).trigger('oae.trigger.follow');
                $('#profile-follow').hide();
            });
        };

        initProfile();
    };
});
