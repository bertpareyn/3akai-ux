/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.fileupload', 'jquery.iframe-transport', 'jquery.jeditable'], function($, oae) {

    return function(uid, showSettings) {

        var $rootel = $('#' + uid);

        // Keeps track of the selected files to upload
        var selectedFiles = [];
        var selectedFilesSize = 0;

        // Defaults the visibility for the files
        var visibility = oae.api.config.getValue('oae-content', 'visibility', 'files');

        /**
         * Resets the state of the widget when the modal dialog has been closed
         */
        var doReset = function() {
            // Destroy the fileupload instance
            $('#upload-input').fileupload('destroy');

            // Unbind the drag and drop shown handler
            $('#upload-container').off('shown');

            // Reset the content visibility
            visibility = oae.api.config.getValue('oae-content', 'visibility', 'files');

            // Reset the selected Files list and total size
            selectedFiles = [];
            selectedFilesSize = 0;

            // Hide all steps
            $('.modal-body > div', $rootel).hide();

            // Show the first step
            $('.modal-body > div:first-child', $rootel).show();

            // Reset buttons
            $('#upload-doupload', $rootel).hide();
            $('#upload-doupload').removeAttr('disabled');
            $('#upload-visibility', $rootel).hide();

            // Reset the progress bar
            $('.progress', $rootel).hide();
            $('.bar', $rootel).css('width', '0%');
        };

        /**
         * Binds and executes the widget reset function when the modal dialog is closed
         */
        var initReset = function() {
            $('#upload-container').on('hidden', function(ev) {
                if ($(ev.target).hasClass('modal')) {
                    doReset();
                }
            });
        };

        /**
         * Updates the cached file data with the updated list of members when a file has been shared.
         */
        var initShareChanged = function() {
            $(document).on('oae.trigger.setpermissionsshared', function(ev, data) {
                $.each(selectedFiles, function(index, file) {
                    file.viewers = data.viewers;
                });
            });
        };

        /**
         * Triggers the necessary changes when permissions for the files to be uploaded have been changed.
         */
        var initPermissionsChanged = function() {
            $(document).on('oae.trigger.setpermissionspermissionschanged', function(ev, data) {
                visibility = data.visibility
            });
        };

        /**
         * Shows the final step in the upload widget
         */
        var nextStep = function() {
            // Hide all containers
            $('.modal-body > div:visible').hide();
            // Show the second and last step
            $('.modal-body > div:last-child').show();
            $('#upload-visibility', $rootel).show();
            $('#upload-doupload', $rootel).show();

            // Trigger the setpermissions widget
            $(document).trigger('oae.trigger.setpermissions', {
                'viewers': [],
                'visibility': visibility,
                'target': $('#upload-permissions-container', $rootel)
            });
        };

        /**
         * Renders a list of the selected files to upload
         */
        var renderSelected = function() {
            oae.api.util.template().render('#upload-selected-template', {'files': selectedFiles}, $('#upload-selected-container'));

            // Hide the spinning icon with jQuery (https://github.com/FortAwesome/Font-Awesome/issues/729)
            $('#upload-selected-container li .icon-spinner').hide();

            /**
             * Saves the edited file name to the appropriate item in the Array of selected files
             *
             * @param  {String}   value   The new value for the item
             * @return {String}   value   The value to show in the editable field after editing completed
             */
            var editableSubmitted = function(value) {
                value = $.trim(value);
                var prevValue = this.revert;
                var $listItemContainer = $($(this).parents('.oae-listitem'));
                var $listItem = $(this).parents('li.oae-list-item');
                if (!value) {
                    return prevValue;
                } else {
                    var fileIndex = $('#upload-selected-container li').index($listItem);
                    selectedFiles[fileIndex].displayName = value;
                    return value;
                }
            };

            // Apply jEditable for inline editing of file names
            $('.jeditable-field').editable(editableSubmitted, {
                'onblur': 'submit'
            });

            // Apply jQuery Tooltip
            $('[rel="tooltip"]', $rootel).tooltip();
        };

        /**
         * Removes a selected file from the list and resets the widget when no files remain
         */
        var setUpDelete = function() {
            $rootel.on('click', '.upload-trash', function(ev) {
                // Get the index of the list item
                var $listItem = $(this).parents('li.oae-list-item');
                var fileIndex = $('#upload-selected-container li').index($listItem);
                // Subtract the size of the file from the total
                selectedFilesSize -= selectedFiles[fileIndex].file.size;
                // This corresponds to the Array from which we'll remove the selected file
                selectedFiles.splice(fileIndex, 1);
                // Also remove it from the UI
                $listItem.remove();
                // If there are no files left reset the widget
                if (!selectedFiles.length) {
                    doReset();
                    initUpload();
                }
            });
        };

        /**
         * Adds selected files to the list of files to upload. Filters out folders and size 0 files
         *
         * @param  {Object}   data   The data object containing information on the files that are selected for upload
         */
        var addToSelected = function(data) {
            $.each(data.files, function(index, file) {
                // Avoid uploading folders and size 0 files
                if (file.size > 0 && file.name) {
                    selectedFilesSize += file.size;
                    var contentObj = {
                        '_id': 'id_' + Math.round(Math.random() * 9999999),
                        'displayName': file.name,
                        'description': '',
                        'file': file,
                        'type': 'file'
                    };
                    // Add the file to the queue
                    selectedFiles.push(contentObj);
                }
            });
        };

        /**
         * Updates the progress indicator
         * @param  {Number}   progress   Number between 0 and 100 indicating the upload progress
         */
        var updateProgress = function(progress) {
            $('.bar', $rootel).css('width', progress + '%');
        };

        /**
         * Initlializes the jQuery fileupload plugin on the upload form
         */
        var initUploadField = function() {
            var prevFile = false;
            // A progress event can be fired multiple times for the same file depending on the size of the file
            // We make the distinction between files in the events by looking at the size of the file in the event
            // If the size of prevFile is equal to the size of totalPrevFile that means that the event is still handling the same file
            // Usage is described in the `progress` handler below
            var totalPrevFile = 0;
            var totalUploaded = 0;

            var fileuploadOptions = {
                'url': '/api/content/create',
                'dropZone': $('#upload-dropzone', $rootel),
                // Drop is fired when a user drops files on the dropzone
                'drop': function(ev, data) {
                    addToSelected(data);
                    renderSelected();
                    nextStep();
                },
                'add': function (ev, data) {/* Overriding `add` to avoid submitting the files on selection */},
                // Change is fired when a user browses for files
                'change': function(ev, data) {
                    addToSelected(data);
                    renderSelected();
                    nextStep();
                },
                'progress': function(ev, data) {
                    // The progress event can be sent out multiple times during the same file upload depending on the size of the file.
                    // If the 'prevFile' variable is false, fill it up with the size of the first file that is uploaded
                    // This check will only be true on the first progress event of the first file that's uploaded
                    if (!prevFile) {
                        prevFile = data.total;
                    }

                    // If the size of the previous file event is the same as the size of the current file event
                    // it's assumed that this is the same file. In that case the 'loaded' is not added to the total loaded size
                    if (prevFile === data.total) {
                        totalPrevFile = data.loaded;
                    // If the size is not the same it's assumed the plugin is handling a different file
                    // and the size of the previous file is added to the total of all files
                    } else {
                        totalUploaded += prevFile;
                        prevFile = data.total;
                        totalPrevFile = data.loaded;
                    }

                    // Update the progress bar
                    updateProgress(((totalUploaded + totalPrevFile) / selectedFilesSize) * 100);
                }
            };

            $('#upload-input').fileupload(fileuploadOptions);
        };

        /**
         * Handles the file uploads and progress indication when the upload has been kicked off.
         */
        var initUploadHandling = function() {
            $('#upload-doupload').off('click').on('click', function() {
                var done = 0;

                // Show the progress bar when the upload starts
                $('.progress', $rootel).show();

                // Disable editing on upload
                $('#upload-doupload').attr('disabled', 'disabled');
                $('.upload-trash').attr('disabled', 'disabled');
                $('#upload-permissions-container *').attr('disabled', 'disabled');

                /**
                 * Calls the api function that uploads the content. Progress is shown for each individual file and
                 * the progress bar is updated after each file upload.
                 *
                 * @param  {Number}    index    The index of the file that's currently being uploaded
                 * @param  {Object}    file     The file to upload
                 */
                var doUpload = function(index, file) {
                    if (file) {
                        var $listItem = $($('#upload-selected-container li')[index]);
                        var $spinner = $listItem.find('.icon-spinner');
                        var $ok = $listItem.find('.icon-ok');
                        var $warning = $listItem.find('.icon-warning-sign');

                        // Add focus to the list element so the browser scrolls
                        $listItem.focus();
                        $spinner.show();
                        oae.api.content.createFile(file.displayName, file.description, visibility, $('#upload-input'), file.file, [], file.viewers, function(error, data) {
                            $spinner.hide();
                            if (!error) {
                                $ok.show();
                            } else {
                                $warning.show();
                            }

                            done++;
                            if (done !== selectedFiles.length) {
                                doUpload(done, selectedFiles[done]);
                            } else {
                                $(window).trigger('done.addcontent.oae');
                                updateProgress(100);
                                $('#upload-doupload').hide();
                                $('#upload-container').modal('hide');
                            }
                        });
                    }
                };

                doUpload(0, selectedFiles[0]);
            });
        };

        /**
         * Initializes the file upload plugin and file upload handling
         */
        var initUpload = function() {
            initUploadField();
            initUploadHandling();
        };

        /**
         * Initializes and shows the upload modal
         */
        var showModal = function() {
            $('#upload-container').modal({
                'backdrop': 'static'
            });
        };

        /**
         * Skip the first step of selecting files and show the files that were dropped
         * @param  {Object}    dropData    The data received from dropping files onto the container
         */
        var showDropped = function(dropData) {
            // Since we already have the selected files we skip to the next step
            initUpload();
            nextStep();

            // Add the dropped files to the fileupload field
            $('#upload-input').fileupload('add', dropData.files);

            // Add the selected files to the internal list of selected files
            addToSelected(dropData.data);

            // Render the selected list
            renderSelected();
        };

        /**
         * Initializes the upload modal dialog
         */
        var initUploadModal = function() {
            $(document).on('click', '.oae-trigger-upload', function() {
                showModal();
                initUpload();
            });

            // Defined `oae-dnd-upload` dropzones will trigger the `oae-trigger-upload` event when files
            // have been dropped. This is caught by the upload widget which shows the modal dialog and
            // renders the files into a list.
            $(document).on('oae-trigger-upload', function(ev, data) {
                showModal();
                $('#upload-container').one('shown', function(a,b) {
                    showDropped(data);
                });
            });
        };

        initReset();
        initUploadModal();
        setUpDelete();
        initPermissionsChanged();
        initShareChanged();

    };
});
