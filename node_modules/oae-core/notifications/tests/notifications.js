casper.echo('Widget - Notifications');

/**
 * Verify that the notifications can be opened
 */
var verifyOpenNotifications = function() {
    // Assert that the button to open the notifications exists
    casper.test.assertExists('#topnavigation-left .oae-trigger-notifications', 'The notification trigger is present');
    // Open the notifications
    casper.click('#topnavigation-left .oae-trigger-notifications');
    // Wait for the notifications container to load
    casper.waitForSelector('#notifications-container', function() {
        // Assert that the notification container exists
        casper.test.assertExists('#notifications-container', 'The notification container is present');
    });
};

/**
 * Open the notifications without verifying/testing
 */
var openNotifications = function() {
    casper.waitForSelector('#topnavigation-left .oae-trigger-notifications', function() {
        // Open the notifications
        casper.click('#topnavigation-left .oae-trigger-notifications');
        // Wait for the container to load, so that the tests can be done immediatly after calling this function
        casper.waitForSelector('#notifications-container', function() {});
    });
};

/**
 * Verify that the add to group notification shows
 *
 * @param    {Object}    user       The object of the user that added the other user to the group
 * @param    {Object}    group      The object of the group the user was added to
 * @param    {Number}    index      The index of the notification in the notifications list (higher if it was made first, lower if it was made last)
 */
var verifyAddToGroup = function(user, group, index) {
    // Assert that the following notification exists '"username" added you to the group "groupname"'
    // Also test instead of only username and groupname on the links to the user and group so that you know those exists.
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a', user.displayName, '\'username\' in the notification "\'username\' added you to the group \'groupname\'" is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ')', 'added you to the group', 'The sentence "added you to the group" from the notification of added to a group is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a', group.displayName, '\'groupname\' in the notification "\'username\' added you to the group \'groupname\'" is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + user.profilePath + '"]', 'The link to the user from the notification of added to a group is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + group.profilePath + '"]', 'The link to the group from the notification of added to a group is present');
};

/**
 * Verify that the created discussion notification shows
 *
 * @param    {Object}    user               The object of the user that created the discussion
 * @param    {Object}    discussion         The object of the discussion that was created
 * @param    {Number}    index              The index of the notification in the notifications list (higher if it was made first, lower if it was made last)
 */
var verifyCreateDiscussion = function(user, discussionName, index) {
    // Assert that the following notification exists '"username" started the discussion "discussionName"'
    // Also test instead of only username and discussionName on the link to the user.
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a',user.displayName, '"username" in the notification "\'username\' started the discussion \'discussionName\'" is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ')', 'started the discussion', 'The sentence "started the discussion" from the notification of created a discussion is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a', discussion.displayName, '"discussionName" in the notification "\'username\' started the discussion \'discussionName\'" is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + user.profilePath + '"]', 'The link to the user from the notification of created a discussion is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + discussion.profilePath + '"]', 'The link to the discussion from the notification of created a discussion is present');
};

/**
 * Verify that the uploaded file notification shows
 *
 * @param    {Object}    user       The object of the user that made the comment
 * @param    {String}    fileName   The name of the file that was commented on
 * @param    {String}    fileUrl    The url to the file that was commented on
 * @param    {Number}    index      The index of the notification in the notifications list (higher if it was made first, lower if it was made last)
 */
var verifyCreatedFile = function(user, fileName, fileUrl, index){
    // Assert that the following notification exists '"username" uploaded "fileName"'
    // Also test instead of only username and fileName on the link to the user and file.
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a',user.displayName, '"username" in the notification "\'username\' uploaded \'filename\'" is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ')', 'uploaded', 'The sentence "uploaded" from the notification of uploaded is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a', fileName, '"filename" in the notification "\'username\' uploaded \'filename\'" is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + user.profilePath + '"]', 'The link to the user from the notification of uploaded is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + fileUrl + '"]', 'The link to the file from the notification of uploaded is present');
};

/**
 * Verify that the commented on file notification shows
 *
 * @param    {Object}    user       The object of the user that made the comment
 * @param    {String}    fileName   The name of the file that was commented on
 * @param    {String}    fileUrl    The url to the file that was commented on
 * @param    {Number}    index      The index of the notification in the notifications list (higher if it was made first, lower if it was made last)
 */
var verifyCommentOnFile = function(user, fileName, fileUrl, index){
    // Assert that the following notification exists '"username" commented on the file "fileName"'
    // Also test instead of only username and fileName on the link to the user and file.
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a',user.displayName, '"username" in the notification "\'username\' commented on the file \'filename\'" is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ')', 'commented on the file', 'The sentence "commented on the file" from the notification of commented on the file is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a', fileName, '"filename" in the notification "\'username\' commented on the file \'filename\'" is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + user.profilePath + '"]', 'The link to the user from the notification of commented on the file is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + fileUrl + '"]', 'The link to the file from the notification of commented on the file is present');
};

/**
 * Verify that the posted to disussion notification shwos
 *
 * @param    {Object}    user           The object of the user that made the post
 * @param    {String}    discussion     The object of the discussion that was posted to
 * @param    {Number}    index          The index of the notification in the notifications list (higher if it was made first, lower if it was made last)
 */
var verifyPostToDiscussion = function(user, discussion, index){
    // Assert that the following notification exists '"username" posted to the discussion "discussionName"'
    // Also test instead of only username and discussionName on the link to the user and discussion.
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a',user.displayName, '"username" in the notification "\'username\' posted to the discussion \'discussionName\'" is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ')', 'posted to the discussion', 'The sentence "posted to the discussion" from the notification of posted to the discussion is present');
    casper.test.assertSelectorHasText('#notifications-container li:nth-child(' + index + ') a', discussion.displayName, '"discussionName" in the notification "\'username\' posted to the discussion \'discussionName\'" is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + user.profilePath + '"]', 'The link to the user from the notification of posted to the discussion is present');
    casper.test.assertExists('#notifications-container li:nth-child(' + index + ') a[href="' + discussion.profilePath + '"]', 'The link to the discussion from the notification of posted to the discussion is present');
};

casper.start('http://test.oae.com', function(){
    var user1 = null;
    var user2 = null;
    // Make two users to be able to test with
    userUtil().createUsers(2, function(users) {
        user1 = users[0];
        user2 = users[1];
    });

    // Log in with user1
    casper.then(function() {
        userUtil().doLogIn(user1.username, 'password');
    });

    casper.thenOpen('http://test.oae.com/me', function() {
        casper.waitForSelector('.activity-widget', function() {
            casper.echo('Verify open notifications', 'INFO');
            verifyOpenNotifications();
        });
    });

    // Make a group for testing purposes
    var group1 = null;
    casper.then(function() {
        groupUtil().createGroup([],[],function(group) {
            group1 = group;
        });
    });

    // Add user to group for testing added to group notification
    casper.then(function() {
        groupUtil().addUserToGroup(user2.username, group1.profilePath);

        userUtil().doLogOut();
        userUtil().doLogIn(user2.username, 'password');

        casper.waitForSelector('.activity-widget', function() {
            openNotifications();
            casper.then(function() {
                casper.echo('Verify added to group notification', 'INFO');
                verifyAddToGroup(user1, group1, 1);
            });
        });
    });

    var discussion1 = null;
    // Create a group discussion to test the created discussion notification with
    casper.then(function() {
        discussionUtil().createGroupDiscussion(group1, function(discussion) {
            discussion1 = discussion;

            userUtil().doLogOut();
            userUtil().doLogIn(user1.username, 'password');

            casper.waitForSelector('.activity-widget', function() {
                openNotifications();
                casper.then(function() {
                    casper.echo('Verify created discussion in group notification', 'INFO');
                    verifyCreateDiscussion(user2, discussion1, 1);
                });
            });
        });
    });

    // Create a discussion for verify post to a discussion notification
    var discussion2 = null;
    casper.then(function() {
        // User1 makes the discussion, user2 posts, user1 sees a notification
        discussionUtil().createDiscussion(1, function(discussion) {
            discussion2 = discussion[0];

            userUtil().doLogOut();
            userUtil().doLogIn(user2.username, 'password');

            discussionUtil().postToDiscussion(discussion2, 'Post!');

            userUtil().doLogOut();
            userUtil().doLogIn(user1.username, 'password');

            casper.waitForSelector('.activity-widget', function() {
                openNotifications();
                casper.then(function() {
                    casper.echo('Verify post to discussion notification', 'INFO');
                    verifyPostToDiscussion(user2, discussion2, 1);
                });
            });

            // Make a file ot test uploaded file notification
            var fileUrl1  = null;
            casper.then(function() {
                contentUtil().createGroupFile(group1, function(fileUrl) {
                    fileUrl1  = fileUrl
                });

                userUtil().doLogOut();
                userUtil().doLogIn(user2.username, 'password');

                casper.waitForSelector('.activity-widget', function() {
                    openNotifications();
                    casper.then(function() {
                        casper.echo('Verify created file notification', 'INFO');
                        // balloons.jpg is the name of the file that gets uploaded in contentUtil()
                        verifyCreatedFile(user1, 'balloons.jpg', fileUrl1, 1);
                    });
                });
            });

            // Make the comment to be able to test if the notifications show at user1
            casper.then(function() {
                contentUtil().commentOnFile(fileUrl1, 'Comment!');

                userUtil().doLogOut();
                userUtil().doLogIn(user1.username, 'password');

                casper.waitForSelector('.activity-widget', function() {
                    openNotifications();
                    casper.then(function() {
                        casper.echo('Verify comment on file notification', 'INFO');
                        verifyCommentOnFile(user2, 'balloons.jpg', fileUrl1, 1);
                    });
                });
            });

            // Log out again
            casper.then(function(){
                userUtil().doLogOut();
            });
        });
    });
});

casper.run(function() {
    casper.test.done();
});
